/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Wishlist = {
  _id: string;
  _type: "wishlist";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  user?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "user";
  };
  product?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "product";
  };
};

export type ProductImage = {
  _id: string;
  _type: "productImage";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  product?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "product";
  };
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  altText?: string;
  isPrimary?: boolean;
};

export type Order = {
  _id: string;
  _type: "order";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  orderId?: string;
  user?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "user";
  };
  items?: Array<{
    _key: string;
  } & OrderItem>;
  total?: number;
  status?: "pending" | "processing" | "shipped" | "delivered" | "cancelled";
  trackingNumber?: string;
  shippingMethod?: string;
  paymentStatus?: "pending" | "paid" | "failed" | "refunded";
};

export type User = {
  _id: string;
  _type: "user";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  clerkId?: string;
  name?: string;
  email?: string;
  address?: {
    street?: string;
    city?: string;
    state?: string;
    zipCode?: string;
    country?: string;
  };
  phoneNumber?: string;
};

export type OrderItem = {
  _type: "orderItem";
  product?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "product";
  };
  quantity?: number;
  price?: number;
};

export type Product = {
  _id: string;
  _type: "product";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  sku?: string;
  description?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
    listItem?: "bullet";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  }>;
  price?: number;
  discountPrice?: number;
  images?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  }>;
  productCategory?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "productCategory";
  };
  material?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "material";
  };
  stone?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "stone";
  };
  stock?: number;
  gender?: "Male" | "Female" | "Unisex";
  weight?: number;
  dimensions?: string;
  isFeatured?: boolean;
};

export type Stone = {
  _id: string;
  _type: "stone";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  description?: string;
  slug?: Slug;
};

export type Material = {
  _id: string;
  _type: "material";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  description?: string;
  slug?: Slug;
};

export type ProductCategory = {
  _id: string;
  _type: "productCategory";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
};

export type Post = {
  _id: string;
  _type: "post";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  author?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "author";
  };
  mainImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  categories?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "category";
  }>;
  publishedAt?: string;
  body?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
    listItem?: "bullet";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  }>;
};

export type Author = {
  _id: string;
  _type: "author";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  bio?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: never;
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
};

export type Category = {
  _id: string;
  _type: "category";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  description?: string;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type BlockContent = Array<{
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  }>;
  style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
  listItem?: "bullet";
  markDefs?: Array<{
    href?: string;
    _type: "link";
    _key: string;
  }>;
  level?: number;
  _type: "block";
  _key: string;
} | {
  asset?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
  };
  hotspot?: SanityImageHotspot;
  crop?: SanityImageCrop;
  alt?: string;
  _type: "image";
  _key: string;
}>;

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type AllSanitySchemaTypes = SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityFileAsset | Geopoint | Wishlist | ProductImage | Order | User | OrderItem | Product | Stone | Material | ProductCategory | Post | Author | Category | Slug | BlockContent | SanityImageCrop | SanityImageHotspot | SanityImageAsset | SanityAssetSourceData | SanityImageMetadata;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./src/lib/utils/sanity/sanityQueries.ts
// Variable: CATEGORIES_QUERY
// Query: *[_type == "productCategory"] {      _id,      name,      "slug": slug.current    } | order(name asc)
export type CATEGORIES_QUERYResult = Array<{
  _id: string;
  name: string | null;
  slug: string | null;
}>;
// Variable: MATERIALS_QUERY
// Query: *[_type == "material"] {      _id,      name,      description,      "slug": slug.current    } | order(name asc)
export type MATERIALS_QUERYResult = Array<{
  _id: string;
  name: string | null;
  description: string | null;
  slug: string | null;
}>;
// Variable: STONES_QUERY
// Query: *[_type == "stone"] {      _id,      name,      description,      "slug": slug.current    } | order(name asc)
export type STONES_QUERYResult = Array<{
  _id: string;
  name: string | null;
  description: string | null;
  slug: string | null;
}>;
// Variable: SINGLE_PRODUCT_FULL
// Query: *[_type == "product" && _id == $productId]{    _id,    sku,    "slug": slug.current,    name,    "image": images[0].asset->url,    "description": description[].children,    price,    discountPrice,    gender,    productCategory -> {_id, name},    material -> {_id, name, description},    stone -> {_id, name, description},    stock,    weight,    _updatedAt,    _createdAt,    isFeatured  }
export type SINGLE_PRODUCT_FULLResult = Array<{
  _id: string;
  sku: string | null;
  slug: string | null;
  name: string | null;
  image: string | null;
  description: Array<Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  }> | null> | null;
  price: number | null;
  discountPrice: number | null;
  gender: "Female" | "Male" | "Unisex" | null;
  productCategory: {
    _id: string;
    name: string | null;
  } | null;
  material: {
    _id: string;
    name: string | null;
    description: string | null;
  } | null;
  stone: {
    _id: string;
    name: string | null;
    description: string | null;
  } | null;
  stock: number | null;
  weight: number | null;
  _updatedAt: string;
  _createdAt: string;
  isFeatured: boolean | null;
}>;
// Variable: ALL_PRODUCTS_PREVIEW
// Query: {    "total": count(*[_type == "product"]),    "products": *[_type == "product"]      {        _id,        sku,        "slug": slug.current,        name,        "images": images[].asset->url,        price,        discountPrice,        gender,        productCategory,        material,        stone,        stock,        _updatedAt,        _createdAt,        isFeatured      } | order(price asc)    }
export type ALL_PRODUCTS_PREVIEWResult = {
  total: number;
  products: Array<{
    _id: string;
    sku: string | null;
    slug: string | null;
    name: string | null;
    images: Array<string | null> | null;
    price: number | null;
    discountPrice: number | null;
    gender: "Female" | "Male" | "Unisex" | null;
    productCategory: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "productCategory";
    } | null;
    material: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "material";
    } | null;
    stone: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "stone";
    } | null;
    stock: number | null;
    _updatedAt: string;
    _createdAt: string;
    isFeatured: boolean | null;
  }>;
};

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "\n    *[_type == \"productCategory\"] {\n      _id,\n      name,\n      \"slug\": slug.current\n    } | order(name asc)\n  ": CATEGORIES_QUERYResult;
    "\n    *[_type == \"material\"] {\n      _id,\n      name,\n      description,\n      \"slug\": slug.current\n    } | order(name asc)\n  ": MATERIALS_QUERYResult;
    "\n    *[_type == \"stone\"] {\n      _id,\n      name,\n      description,\n      \"slug\": slug.current\n    } | order(name asc)\n  ": STONES_QUERYResult;
    "*[_type == \"product\" && _id == $productId]{\n    _id,\n    sku,\n    \"slug\": slug.current,\n    name,\n    \"image\": images[0].asset->url,\n    \"description\": description[].children,\n    price,\n    discountPrice,\n    gender,\n    productCategory -> {_id, name},\n    material -> {_id, name, description},\n    stone -> {_id, name, description},\n    stock,\n    weight,\n    _updatedAt,\n    _createdAt,\n    isFeatured\n  }": SINGLE_PRODUCT_FULLResult;
    "{\n    \"total\": count(*[_type == \"product\"]),\n    \"products\": *[_type == \"product\"]\n      {\n        _id,\n        sku,\n        \"slug\": slug.current,\n        name,\n        \"images\": images[].asset->url,\n        price,\n        discountPrice,\n        gender,\n        productCategory,\n        material,\n        stone,\n        stock,\n        _updatedAt,\n        _createdAt,\n        isFeatured\n      } | order(price asc)\n    }": ALL_PRODUCTS_PREVIEWResult;
  }
}
